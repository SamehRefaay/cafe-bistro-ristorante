generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "windows"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id
    firstName String
    lastName  String
    password  String?
    email     String
    avatarUrl String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id          Int             @id @default(autoincrement())
    name        String
    description String
    price       Float
    image       String?
    categoryId  Int
    category    ProductCategory @relation(fields: [categoryId], references: [id])
}

model ProductCategory {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    image       String?
    products    Product[]
}

// model Category {
//     id        String    @id @default(cuid())
//     createdAt DateTime  @default(now())
//     title     String
//     images    String[]
//     slug      String    @unique
//     products  Product[]
// }

// model Product {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     title     String
//     desc      String
//     image     String?
//     price     Decimal
//     options   Json[]
//     category  Category @relation(fields: [cateSlug], references: [slug])
//     cateSlug  String
// }

// model Account {
//     id                 String    @id @default(cuid())
//     userId             String
//     providerType       String
//     providerId         String
//     providerAccountId  String
//     refreshToken       String?
//     accessToken        String?
//     accessTokenExpires DateTime?
//     createdAt          DateTime  @default(now())
//     updatedAt          DateTime  @updatedAt
//     user               User      @relation(fields: [userId], references: [id])

//     @@unique([providerId, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     userId       String
//     expires      DateTime
//     sessionToken String   @unique
//     accessToken  String   @unique
//     createdAt    DateTime @default(now())
//     updatedAt    DateTime @updatedAt
//     user         User     @relation(fields: [userId], references: [id])
// }

// model VerificationRequest {
//     id         String   @id @default(cuid())
//     identifier String
//     token      String   @unique
//     expires    DateTime
//     createdAt  DateTime @default(now())
//     updatedAt  DateTime @updatedAt

//     @@unique([identifier, token])
// }
